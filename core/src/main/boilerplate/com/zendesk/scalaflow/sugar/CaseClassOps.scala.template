package com.zendesk.scalaflow.sugar

import com.google.cloud.dataflow.sdk.Pipeline
import com.google.cloud.dataflow.sdk.coders.{Coder, DelegateCoder, VoidCoder}
import com.google.cloud.dataflow.sdk.coders.DelegateCoder.CodingFunction

import scala.reflect.ClassTag
import scala.reflect.runtime.universe._

import com.zendesk.scalaflow.coders._

trait CaseClassOps {

  def caseClassCoder[P <: Product](construct: () => P): Coder[P] = {
    val intermediate = VoidCoder.of()
    val to = new CodingFunction[P, Void] {
      override def apply(p: P) = null
    }
    val from = new CodingFunction[Void, P] {
      override def apply(v: Void) = construct()
    }

    DelegateCoder.of(intermediate, to, from)
  }

  def caseClassCoder[V1: Coder, P <: Product](construct: (V1) => P): Coder[P] = {
    val intermediate = implicitly[Coder[V1]]
    val to = new CodingFunction[P, V1] {
      override def apply(p: P) = p.productElement(0).asInstanceOf[V1]
    }
    val from = new CodingFunction[V1, P] {
      override def apply(v: V1) = construct(v)
    }

    DelegateCoder.of(intermediate, to, from)
  }

  [2..22#def caseClassCoder[[#V1: Coder#], P <: Product](construct: ([#V1#]) => P): Coder[P] = {
    val intermediate = new Tuple1Coder[[#V1#]]()
    val to = new CodingFunction[P, Tuple1[[#V1#]]] {
      override def apply(p: P) = {
        [#val v1 = p.productElement(0).asInstanceOf[V1]#
        ]
        Tuple1([#v1#])
      }
    }
    val from = new CodingFunction[Tuple1[[#V1#]], P] {
      override def apply(t: Tuple1[[#V1#]]) = {
        construct([#t._1#])
      }
    }

    DelegateCoder.of(intermediate, to, from)
  }#

  ]
}

object CaseClassOps extends CaseClassOps
